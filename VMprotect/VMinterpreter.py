# By c10udlnk (https://github.com/c10udlnk)
# Enjoy it! 0v0

# 格式为opcode:[本指令所占字节数, 伪代码语句参数个数, 伪代码语句]
ins_set = { 0: [3, 2, "mov arr[r{0}], 0x{1:0>4X}"],
            1: [3, 2, "mov r{0}, 0x{1:0>4X}"],
            2: [3, 2, "mov r{0}, r{1}"],
            3: [3, 2, "mov r{0}, arr[r{1}]"],
            4: [3, 2, "mov arr[r{0}], r{1}"],
            5: [3, 1, "push r{0}"],
            6: [3, 1, "pop r{0}"],
            7: [3, 2, "add r{0}, 0x{1:0>4X}"],
            8: [3, 2, "add r{0}, r{1}"],
            9: [3, 2, "sub r{0}, 0x{1:0>4X}"],
           10: [3, 2, "sub r{0}, r{1}"],
           11: [3, 2, "mul r{0}, 0x{1:0>4X}"],
           12: [3, 2, "mul r{0}, r{1}"],
           13: [3, 2, "shl r{0}, 0x{1:0>4X}"],
           14: [3, 2, "shl r{0}, r{1}"],
           15: [3, 2, "shr r{0}, 0x{1:0>4X}"],
           16: [3, 2, "shr r{0}, r{1}"],
           17: [3, 2, "xor r{0}, 0x{1:0>4X}"],
           18: [3, 2, "xor r{0}, r{1}"],
           19: [3, 2, "or r{0}, 0x{1:0>4X}"],
           20: [3, 2, "or r{0}, r{1}"],
           21: [3, 2, "and r{0}, 0x{1:0>4X}"],
           22: [3, 2, "and r{0}, r{1}"],
           23: [3, 1, "mov r{0}, getchar()"],
           24: [3, 1, "putchar(r{0})"],
           25: [3, 0, "exit"],
           26: [3, 2, "cmp r{0}, 0x{1:0>4X}"],
           27: [3, 2, "cmp r{0}, r{1}"],
           28: [3, 1, "jz {0:0>3}"],
           29: [3, 1, "jmp {0:0>3}"],
           30: [3, 1, "jl {0:0>3}"],
           31: [3, 1, "jnz {0:0>3}"]}
opcode = [18, 0, 0, 18, 1, 1, 18, 2, 2, 18, 3, 3, 18, 6, 6, 18, 7, 7, 1, 0, 105, 1, 1, 110, 1, 2, 112, 1, 3, 117, 1, 6, 116, 1, 7, 32, 24, 0, 18446744073709551615, 24, 1, 18446744073709551615, 24, 2, 18446744073709551615, 24, 3, 18446744073709551615, 24, 6, 18446744073709551615, 24, 7, 18446744073709551615, 1, 0, 102, 1, 1, 108, 1, 2, 97, 1, 3, 103, 1, 6, 58, 1, 7, 32, 24, 0, 18446744073709551615, 24, 1, 18446744073709551615, 24, 2, 18446744073709551615, 24, 3, 18446744073709551615, 24, 6, 18446744073709551615, 24, 7, 18446744073709551615, 18, 1, 1, 23, 0, 18446744073709551615, 5, 0, 18446744073709551615, 7, 1, 1, 26, 1, 38, 30, 31, 18446744073709551615, 25, 18446744073709551615, 18446744073709551615, 18, 2, 2, 0, 2, 255, 7, 2, 1, 0, 2, 547, 7, 2, 1, 0, 2, 571, 7, 2, 1, 0, 2, 567, 7, 2, 1, 0, 2, 567, 7, 2, 1, 0, 2, 587, 7, 2, 1, 0, 2, 555, 7, 2, 1, 0, 2, 251, 7, 2, 1, 0, 2, 555, 7, 2, 1, 0, 2, 547, 7, 2, 1, 0, 2, 591, 7, 2, 1, 0, 2, 239, 7, 2, 1, 0, 2, 567, 7, 2, 1, 0, 2, 239, 7, 2, 1, 0, 2, 591, 7, 2, 1, 0, 2, 591, 7, 2, 1, 0, 2, 547, 7, 2, 1, 0, 2, 547, 7, 2, 1, 0, 2, 571, 7, 2, 1, 0, 2, 567, 7, 2, 1, 0, 2, 255, 7, 2, 1, 0, 2, 563, 7, 2, 1, 0, 2, 563, 7, 2, 1, 0, 2, 563, 7, 2, 1, 0, 2, 567, 7, 2, 1, 0, 2, 587, 7, 2, 1, 0, 2, 563, 7, 2, 1, 0, 2, 591, 7, 2, 1, 0, 2, 555, 7, 2, 1, 0, 2, 555, 7, 2, 1, 0, 2, 587, 7, 2, 1, 0, 2, 239, 7, 2, 1, 25, 18446744073709551615, 18446744073709551615, 18, 2, 2, 3, 0, 2, 9, 0, 99, 4, 2, 0, 7, 2, 1, 26, 2, 32, 30, 1, 18446744073709551615, 25, 18446744073709551615, 18446744073709551615, 6, 0, 18446744073709551615, 26, 0, 125, 28, 18, 18446744073709551615, 1, 0, 119, 1, 1, 114, 1, 2, 111, 1, 3, 110, 1, 6, 103, 1, 7, 33, 24, 0, 18446744073709551615, 24, 1, 18446744073709551615, 24, 2, 18446744073709551615, 24, 3, 18446744073709551615, 24, 6, 18446744073709551615, 24, 7, 18446744073709551615, 1, 0, 10, 24, 0, 18446744073709551615, 25, 18446744073709551615, 18446744073709551615, 1, 8, 256, 26, 8, 225, 30, 25, 18446744073709551615, 6, 0, 18446744073709551615, 4, 8, 0, 9, 8, 1, 29, 19, 18446744073709551615, 6, 0, 18446744073709551615, 26, 0, 123, 31, 3, 18446744073709551615, 6, 0, 18446744073709551615, 26, 0, 103, 31, 3, 18446744073709551615, 6, 0, 18446744073709551615, 26, 0, 97, 31, 3, 18446744073709551615, 6, 0, 18446744073709551615, 26, 0, 108, 31, 3, 18446744073709551615, 6, 0, 18446744073709551615, 26, 0, 102, 31, 3, 18446744073709551615, 18, 9, 9, 1, 10, 225, 3, 7, 9, 3, 6, 10, 17, 6, 66, 13, 6, 2, 27, 6, 7, 31, 3, 18446744073709551615, 7, 9, 1, 7, 10, 1, 26, 9, 32, 30, 42, 18446744073709551615, 1, 0, 99, 1, 1, 111, 1, 2, 114, 1, 3, 114, 1, 6, 101, 1, 7, 99, 24, 0, 18446744073709551615, 24, 1, 18446744073709551615, 24, 2, 18446744073709551615, 24, 3, 18446744073709551615, 24, 6, 18446744073709551615, 24, 7, 18446744073709551615, 1, 0, 116, 1, 1, 108, 1, 2, 121, 1, 3, 33, 1, 6, 10, 24, 0, 18446744073709551615, 24, 1, 18446744073709551615, 24, 2, 18446744073709551615, 24, 3, 18446744073709551615, 24, 6, 18446744073709551615, 25, 18446744073709551615, 18446744073709551615]
pc = 0
output = open('assembly.txt', 'w')
output.write("Addr    Code\n")
addrfmt = "{0:0>3}     "

# 多个函数
base = 0x41E000
func_start = [0x41E000, 0x41E378, 0x41E9A8, 0x41EA68]
for i in range(len(func_start)):
    func_start[i] = (func_start[i]-base) // 8 # //8是因为该vm的opcode是以qword为单位导出的
# 单个函数
# func_start = [0]
lstFunc = 0
while pc < len(opcode):
    i = pc
    pc += ins_set[opcode[i]][0]
    output.write(addrfmt.format(i-lstFunc))
    if opcode[i] not in ins_set.keys():
        print("\033[0;31m[-] UknOpcode 0x{0:X} in addr 0x{1:0>8X}.\033[0m".format(opcode[i], i))
        break
    # 特殊处理
    elif 28 <= opcode[i] <= 31:
        output.write(ins_set[opcode[i]][2].format(opcode[i+1]*3) + '\n')
    # 通用处理
    else:
        args = []
        for j in range(ins_set[opcode[i]][1]):
            args.append(opcode[i+1+j])
        output.write(ins_set[opcode[i]][2].format(*args) + '\n')
    if pc in func_start:
        output.write('\n')
        lstFunc = pc

output.close()